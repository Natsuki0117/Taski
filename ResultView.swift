//
//  ResultView.swift
//  Taski
//
//  Created by Èáë‰∫ïËèúÊ¥•Â∏å on 2025/09/18.
//

import SwiftUI

struct ResultView: View {
    let task: TaskItem
    @Environment(\.dismiss) private var dismiss

    private var lastSession: TaskItem.TaskSession? {
        task.sessions.last
    }

    private var actualMinutes: Int? {
        if let s = lastSession { return s.duration / 60 }
        if let sec = task.actualSeconds { return sec / 60 }
        if task.extendedMinutes > 0 { return task.doTime + task.extendedMinutes }
        return nil
    }

    private var actualEmotion: Int? {
        if let s = lastSession { return s.emotionLevel }
        if let fe = task.finalEmotion { return fe }
        if task.emotionLevel != 0 { return task.emotionLevel }
        return nil
    }

    private var locationText: String {
        lastSession?.location ?? "Ë®òÈå≤„Å™„Åó"
    }

    private var timeDiff: Int? {
        guard let actual = actualMinutes else { return nil }
        return actual - task.doTime
    }

    private var difficultyDiff: Int? {
        guard let actual = actualEmotion else { return nil }
        return actual - task.slider
    }

    private var feedbackText: String {
        var lines: [String] = []

        if let diff = timeDiff {
            if diff <= -5 {
                lines.append("‚ö° „Åô„Åî„ÅÑÔºÅ‰∫àÂÆö„Çà„Çä \(abs(diff))ÂàÜÊó©„ÅèÁµÇ„Çè„Å£„Å¶„Çã„Çà„ÄÇÈõÜ‰∏≠„Åó„Å¶Âèñ„ÇäÁµÑ„ÇÅ„Åü„Çì„Å†„Å≠„ÄÇ")
            } else if diff < 0 {
                lines.append("üëç ‰∫àÂÆö„Çà„ÇäÂ∞ë„ÅóÊó©„ÅèÁµÇ„Çè„Å£„Å¶„ÅÑ„Åæ„ÅôÔºà\(abs(diff))ÂàÜÔºâ„ÄÇËâØ„ÅÑ„Éö„Éº„ÇπÔºÅ")
            } else if diff == 0 {
                lines.append("üëå ‰∫àÂÆöÈÄö„Çä„Å´ÂÆå‰∫Ü„Åß„Åç„Å¶„Çã„Å≠„ÄÇË¶ãÁ©ç„ÇÇ„Çä„ÅåÂÆâÂÆö„Åó„Å¶„Çã„Çà„ÄÇ")
            } else if diff <= 5 {
                lines.append("‚è≥ ‰∫àÂÆö„Çà„Çä \(diff)ÂàÜÈÅÖ„Çå„Å¶„Çã„Å≠„ÄÇ„Å°„Çá„Å£„Å®Èï∑Âºï„ÅÑ„Åü„Åã„ÇÇ„ÄÇ")
            } else {
                lines.append("‚ö†Ô∏è ‰∫àÂÆö„Çà„Çä \(diff)ÂàÜÈï∑„Åè„Åã„Åã„Å£„Å¶„Çã„Çà„ÄÇ„Åì„ÅÆ„Çø„Çπ„ÇØ„ÅØÊôÇÈñì„Åã„Åã„Çä„Åå„Å°„Åã„ÇÇ„ÄÅ„ÄÅÔºü")
            }
        } else {
            lines.append("‚ÑπÔ∏è ÂÆüÈöõ„ÅÆÊôÇÈñì„ÅÆË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÊ¨°Âõû„ÅØ„Çª„ÉÉ„Ç∑„Éß„É≥„Çí‰øùÂ≠ò„Åó„Å¶„Åø„Å¶„Å≠„ÄÇ")
        }

        if let diff = difficultyDiff {
            if diff <= -2 {
                lines.append("üåü ÂÆüÈöõ„ÅØ„Åã„Å™„ÇäÊ•Ω„Å´ÊÑü„Åò„Å¶„Çã„Åø„Åü„ÅÑÔºÅ‰∫àÂÆö„ÅÆÈõ£ÊòìÂ∫¶„Çí‰∏ã„Åí„Å¶„ÇÇËâØ„Åï„Åù„ÅÜ„ÄÇ")
            } else if diff < 0 {
                lines.append("üòä ‰∫àÂÆö„Çà„ÇäÊ•Ω„Å´„Åß„Åç„Åü„Åø„Åü„ÅÑ„ÄÇÊ¨°Âõû„ÅØÂ∞ë„Åó„Çø„Çπ„ÇØ„ÇíÂ¢ó„ÇÑ„Åó„Å¶„ÇÇ„ÅÑ„ÅÑ„Åã„ÇÇ„ÄÇ")
            } else if diff == 0 {
                lines.append("üòå ÊÉ≥ÂÆö„Å©„Åä„Çä„ÅÆÈõ£„Åó„Åï„Å†„Å£„Åü„Å≠„ÄÇË¶ãÁ©ç„ÇÇ„Çä„Éê„ÉÉ„ÉÅ„É™ÔºÅ")
            } else if diff <= 2 {
                lines.append("üòÖ ‰∫àÂÆö„Çà„ÇäÂ∞ë„ÅóÂ§ßÂ§â„Å†„Å£„Åü„Å≠„ÄÇÊ¨°„ÅØÂ∞ë„Åó‰ΩôË£ï„ÇíË¶ã„Çà„ÅÜ„ÄÇ")
            } else {
                lines.append("üí™ ‰∫àÊÉ≥„Çà„Çä„Å†„ÅÑ„Å∂Â§ßÂ§â„Å†„Å£„Åü„Å≠„ÄÇ„Çø„Çπ„ÇØ„ÇíÂàÜÂâ≤„Åô„Çã„Å®ËâØ„ÅÑ„Åã„ÇÇ„ÄÅ„ÄÅ„ÄÅÔºü")
            }
        } else {
            lines.append("üìù Èõ£ÊòìÂ∫¶„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÁµÇ‰∫ÜÊôÇ„Å´ÂÖ•Âäõ„Åó„Å¶„Åø„Å¶„Å≠„ÄÇ")
        }

        return lines.joined(separator: "\n\n")
    }

    var body: some View {
        ZStack {
            // ËÉåÊôØ„Çí„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥„Å´
            LinearGradient(
                colors: [Color.blue.opacity(0.2), Color.purple.opacity(0.2)],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()

            MeshView() // „É°„ÉÉ„Ç∑„É•ÂäπÊûú„ÇíÊÆã„ÅôÂ†¥Âêà
                .opacity(0.3)
            
            NavigationStack {
                ScrollView {
                    VStack(spacing: 20) {
                        // „Éò„ÉÉ„ÉÄ„Éº
                        VStack(spacing: 8) {
                            Text(task.title)
                                .font(.title2)
                                .bold()
                                .multilineTextAlignment(.center)
                                .foregroundColor(.primary)

                            if locationText != "Ë®òÈå≤„Å™„Åó" {
                                Text("üìç \(locationText)")
                                    .font(.headline)
                                    .foregroundColor(.white)
                                    .padding(.horizontal, 14)
                                    .padding(.vertical, 6)
                                    .background(
                                        LinearGradient(
                                            colors: [Color.purple.opacity(0.8), Color.blue.opacity(0.8)],
                                            startPoint: .topLeading,
                                            endPoint: .bottomTrailing
                                        )
                                    )
                                    .clipShape(Capsule())
                                    .shadow(color: .purple.opacity(0.6), radius: 6, x: 0, y: 3)
                            } else {
                                HStack(spacing: 6) {
                                    Image(systemName: "mappin.and.ellipse")
                                        .foregroundColor(.secondary)
                                    Text(locationText)
                                        .font(.subheadline)
                                        .foregroundColor(.secondary)
                                }
                            }
                        }
                        .padding(.top, 12)

                        // „É°„Ç§„É≥„Ç´„Éº„ÉâÔºàÂçäÈÄèÊòéÔºâ
                        VStack(spacing: 16) {
                            HStack {
                                VStack(alignment: .leading, spacing: 6) {
                                    Text("‰∫àÂÆöÊôÇÈñì")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    Text("\(task.doTime) ÂàÜ")
                                        .font(.headline)
                                }
                                Spacer()
                                VStack(alignment: .leading, spacing: 6) {
                                    Text("ÂÆüÈöõ„ÅÆÊôÇÈñì")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    if let actual = actualMinutes {
                                        Text("\(actual) ÂàÜ")
                                            .font(.headline)
                                    } else {
                                        Text("Ë®òÈå≤„Å™„Åó")
                                            .font(.headline)
                                            .foregroundColor(.secondary)
                                    }
                                }
                            }

                            Divider()

                            HStack {
                                VStack(alignment: .leading, spacing: 6) {
                                    Text("‰∫àÂÆö„ÅÆÈõ£ÊòìÂ∫¶")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    Text("\(task.slider)/10")
                                        .font(.headline)
                                }
                                Spacer()
                                VStack(alignment: .leading, spacing: 6) {
                                    Text("ÂÆüÈöõ„ÅÆÈõ£ÊòìÂ∫¶")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                    if let em = actualEmotion {
                                        HStack(spacing: 6) {
                                            Text("\(em)/10")
                                                .font(.headline)
                                            Text(emotionEmoji(for: em))
                                        }
                                    } else {
                                        Text("Êú™ÂÖ•Âäõ")
                                            .font(.headline)
                                            .foregroundColor(.secondary)
                                    }
                                }
                            }
                        }
                        .padding()
                        .background(
                            RoundedRectangle(cornerRadius: 18)
                                .fill(Color.white.opacity(0.6))
                                .shadow(color: Color.black.opacity(0.08), radius: 8, x: 0, y: 4)
                        )
                        .padding(.horizontal)

                        // „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
                        VStack(spacing: 12) {
                            Text("„ÅÇ„Å™„Åü„Å∏„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ")
                                .font(.headline)
                                .foregroundColor(.secondary)

                            Text(feedbackText)
                                .font(.body)
                                .multilineTextAlignment(.leading)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(
                                    RoundedRectangle(cornerRadius: 16)
                                        .fill(
                                            LinearGradient(
                                                colors: [Color.purple.opacity(0.3), Color.blue.opacity(0.2)],
                                                startPoint: .topLeading,
                                                endPoint: .bottomTrailing
                                            )
                                        )
                                )
                        }
                        .padding(.horizontal)

                        // „É©„É≥„ÇØ
                        if let rank = task.completedRank {
                            VStack(spacing: 6) {
                                Text("ÁµêÊûú„É©„É≥„ÇØ")
                                    .font(.subheadline)
                                    .foregroundColor(.secondary)
                                Text(rank)
                                    .font(.system(size: 36, weight: .bold))
                                    .foregroundStyle(
                                        LinearGradient(
                                            colors: [Color.purple, Color.blue],
                                            startPoint: .leading,
                                            endPoint: .trailing
                                        )
                                    )
                            }
                            .padding(.top, 6)
                        }

                        Spacer(minLength: 30)

                        // Èñâ„Åò„Çã„Éú„Çø„É≥
                        Button(action: { dismiss() }) {
                            Text("Èñâ„Åò„Çã")
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(
                                    LinearGradient(
                                        colors: [Color.purple, Color.blue],
                                        startPoint: .leading,
                                        endPoint: .trailing
                                    )
                                )
                                .foregroundColor(.white)
                                .cornerRadius(14)
                                .padding(.horizontal)
                        }
                        .padding(.bottom, 20)
                    }
                }
                .background(
                    LinearGradient(
                        colors: [Color.blue.opacity(0.1), Color.purple.opacity(0.1)],
                        startPoint: .top,
                        endPoint: .bottom
                    )
                    .ignoresSafeArea()
                )
                .navigationTitle("ÁµêÊûú")
                .navigationBarTitleDisplayMode(.inline)
            }
        }
    }

    private func emotionEmoji(for level: Int) -> String {
        switch level {
        case 0...2: return "üòç"
        case 3...4: return "üòä"
        case 5...6: return "üòê"
        case 7...8: return "üò£"
        case 9...10: return "üò§"
        default: return "‚ùì"
        }
    }
}
